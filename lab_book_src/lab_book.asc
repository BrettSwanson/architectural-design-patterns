= Architectural Design Patterns
Daniel Hinojosa
:source-highlighter: pygments
:pygments-style: friendly
:icons: font
:imagesdir: ./images
:project-name: advanced_java
:star: *
:starline: *_
:starstar: **
:underscore: _
:toc: left
:backend: revealjs
:customcss: custom.css
:topic: state=title
:icons: font

== Lab 1: ArchUnit

. Open the _architectural-design-patterns_ project in your favorite editor or IDE
. In the _src/test/java_ directory, and in the `com.jitterted.ebp.blackjack` package create a file called _HexArchTest.java_
. In the file, copy the following content
+
[source, java, subs="attributes,quotes,verbatim"]
----
package com.jitterted.ebp.blackjack;

import com.tngtech.archunit.core.domain.JavaClasses;
import com.tngtech.archunit.core.importer.ClassFileImporter;
import com.tngtech.archunit.lang.ArchRule;
import org.junit.jupiter.api.Test;

import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.noClasses;

public class HexArchTest {

  @Test
  public void domainMustNotDependOnAdapter() throws Exception {
    JavaClasses importedClasses = 
        new ClassFileImporter().importPackages("com.jitterted.ebp.blackjack");

    ArchRule myRule = noClasses().that().resideInAPackage("..domain..")
                                 .should().dependOnClassesThat()
                                 .resideInAPackage("..adapter..");

    myRule.check(importedClasses);
  }
}
----
+
. Run the test in either your editor, or run it using `mvn test` in the command line.
. Does it violate our architectural rule?

image::stop.png[width="20%", height="20%", align="center"]


== Lab 2: Circuit Breaker

. In the _src/test/java_ directory, and in the `com.xyzcorp.resilience4j` package, open _CircuitBreakTest.java_
. Run the `TestCircuitBreaker` test and notice how it handles failure
. Change order with the server of the output
. Try to change different settings in the `CircuitBreaker` and review the metrics

image::stop.png[width="20%", height="20%", align="center"]

== Lab 3: Retry

. In the _src/test/java_ directory, and in the `com.xyzcorp.resilience4j` package, open _RetryTest.java_
. Run the `testRetry` test and notice how it handles failure
. Change order with the server of the output
. Try to change different settings in the `Retry` and review the metrics

image::stop.png[width="20%", height="20%", align="center"]

== Lab 4: Bulkhead

. In the _src/test/java_ directory, and in the `com.xyzcorp.resilience4j` package, open _BulkheadTest.java_
. Run the `testSemaphoneBulkhead` test and notice how it handles saturation
. Try to change different settings in the `Bulkhead` and review the metrics
. Run the `testThreadPoolBulkhead` test and notice how it handles saturation
. Try to change different settings in the `ThreadPoolBulkhead` and review the metrics

image::stop.png[width="20%", height="20%", align="center"]

== Lab 5: Competing Consumers

NOTE: This will not work on Apple Silicon M1, unfortunately because the amd64 will not run. While docker can emulate for the most, it will not in this case.

. Open a terminal and navigate to your _architectural-design-patterns_ project and into the _competing-consumers_ folder
. Run the command `docker-compose up -d broker zookeeper control-center`
. Wait until all the components are loaded that you can monitor with `docker ps`
. In your browser of choice, open `https://localhost:9021` and click on the broker labeled _controlcenter-cluster_
+
image::control-center.png[]
+
. Next, click on the _Topics_ section on the left menu
. Click on _Add Topic_ button on the upper right hand corner
. In this new topic window, name the new topic _my-orders_ and enter `3` partitions
. Click the _Create with Defaults_ button
+
image::create-topic.png[]
+
. Go back to your terminal and run `docker-compose up -d my-producer my-consumer-1 my-consumer-2 my-consumer-3`
. View the logs of the running consumers, for example, to view my-consumer-3 we can use `docker logs my-consumer-3` or `docker logs my-consumer-3 -f` and view the distribution of orders
. Knock one of the consumers off using `docker-compose stop my-consumer-3` and view the logs of both `my-consumer-2` and `my-consumer-1`
. What do the logs say?
. Run `docker-compose down` in the _competing-consumers_ folder

image::stop.png[width="20%", height="20%", align="center"]

== Lab 6: Claim Check

NOTE: This will not work on Apple Silicon M1, unfortunately because the amd64 will not run. While docker can emulate for the most, it will not in this case.

. Open a terminal and navigate to your _architectural-design-patterns_ project and into the _claim_cqrs_ folder
. Run the command `docker-compose up -d broker zookeeper control-center`
. Wait until all the components are loaded that you can monitor with `docker ps`
. In your browser of choice, open `https://localhost:9021` and click on the broker labeled _controlcenter-cluster_
+
image::control-center.png[]
+
. Next, click on the _Topics_ section on the left menu
. Click on _Add Topic_ button on the upper right hand corner
. In this new topic window, name the new topic _my-avro-orders_ and enter `3` partitions
. Click the _Create with Defaults_ button
+
image::create-myavro-topic.png[]
+
. Go back to your terminal and run `docker-compose up -d my-avro-producer my-avro-consumer-1 my-avro-consumer-2 my-avro-consumer-3`
. Visit `https://localhost:8081/subjects` and what do you see? Note one of the subjects, `my-avro-orders-value`
. Visit `https://localhost:8081/my-avro-orders/versions` and what do you see? Note the version number
. Visit `https://localhost:8081/my-avro-orders/versions/{versionId}` where you will replace `{version}` with the version you noted in the previous step. What do you see?
. The idea here is that there a schema involved and you are looking at the storage, the claim check is the `id` you see in this payload. This schema is not sent with the message
. Keep this instances up in docker for the next lab

image::stop.png[width="20%", height="20%", align="center"]

== Lab 7: CQRS

. In your browser of choice, open `https://localhost:9021` and click on the broker labeled _controlcenter-cluster_
+
image::control-center.png[]
+
. Select on the left hand menu _ksqlDB_
. Select `ksqldb1` instance
. In the _Editor_, enter the following:
+
[source, ksql, subs="attributes,quotes,verbatim"]
----
CREATE STREAM my_avro_orders \
(total BIGINT, shipping VARCHAR, state VARCHAR, discount DOUBLE, \
gender VARCHAR) WITH (kafka_topic='my-avro-orders', value_format='AVRO');
----
+
. Select `auto.offset.reset` to `earliest`
. In your editor, enter the following to create non-persistent query using `SELECT * from my_avro_orders emit changes;` and review the results
. In your editor, enter the following to create another non-persistent query using `SELECT state, shipping from my_avro_orders emit changes;` and review the results
. In your editor, enter the following to create another non-persistent query using `SELECT state, count(*) as count from my_avro_orders group by state emit changes;` and review the results
. In your editor, enter the following to create another persistent query using `CREATE TABLE my_avro_state_count AS SELECT state, count(*) as count from my_avro_orders group by state emit changes;`
. Click on _Topics_ on the left hand menu, notice the new topic _MY_AVRO_STATE_COUNT_, view the messages, this is a materialized view that we can port over to a database.
. When done, in the terminal, type `docker compose down`

image::stop.png[width="20%", height="20%", align="center"]
